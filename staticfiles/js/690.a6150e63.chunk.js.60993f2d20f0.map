{"version":3,"file":"static/js/690.a6150e63.chunk.js","mappings":"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","sources":["icons/CheckIcon.js","icons/ClockIcon.js","pages/SentMessageList.js","pages/ReceivedMessageList.js","pages/MessageManagementPage.js"],"sourcesContent":["const CheckIcon = ({ color }) => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 448 512\" style={{ fill: color, fontSize: '18px' }}>\n      <path d=\"M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\" />\n    </svg>\n  );\n};\n\nexport default CheckIcon;\n","const ClockIcon = () => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"1em\" viewBox=\"0 0 512 512\" style={{ fill: 'var(--bs-secondary)', fontSize: '20px' }}>\n      <path d=\"M464 256A208 208 0 1 1 48 256a208 208 0 1 1 416 0zM0 256a256 256 0 1 0 512 0A256 256 0 1 0 0 256zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z\" />\n    </svg>\n  );\n};\n\nexport default ClockIcon;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport Message from \"../components/Message\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport CheckIcon from \"../icons/CheckIcon\";\nimport EllipsesIcon from \"../icons/EllipsesIcon\";\nimport ClockIcon from \"../icons/ClockIcon\";\n\nconst SentMessageList = ({ refresh }) => {\n  const user = useSelector((state) => state.user);\n  const { userInfo } = user;\n  const config = useSelector((state) => state.config);\n  const { baseURL } = config;\n  const [messages, setMessages] = useState([]);\n  const navigate = useNavigate();\n  const [error, setError] = useState(\"\");\n  const [now, setNow] = useState(null);\n\n  const readTheMessage = (id) => {\n    navigate(`/admin/sent-messages-list/${id}`);\n  };\n\n  const deleteMessage = async (id) => {\n    const token = userInfo.token;\n    try {\n      await axios.delete(`${baseURL}/users/messages/delete/${id}`, {\n        headers: {\n          Authorization: `JWT ${token}`,\n        },\n      });\n      setNow(new Date());\n    } catch {\n      setError(\n        \"There was a problem deleting the message, Make sure you have a stable internet connection.\"\n      );\n    }\n  };\n\n  const fetchMessages = async () => {\n    try {\n      const token = userInfo.token;\n      const { data } = await axios.get(\"/users/sent-messages\", {\n        headers: {\n          Authorization: `JWT ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        baseURL: baseURL,\n      });\n      setMessages(data);\n    } catch (err) {\n      setError(\n        \"There was a problem loading the messages, Make sure you have a stable internet connection\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (!userInfo) navigate(\"/login\");\n    if (userInfo && userInfo.isAdmin) fetchMessages();\n  }, [refresh, now]);\n\n  return (\n    <Container id=\"user-list__container\">\n      <h2\n        className=\"txt--black font-family-secondary mt-3 mb-0\"\n        style={{ alignSelf: \"flex-start\" }}\n      >\n        Sent Messages\n      </h2>\n      {error && (\n        <Message variant=\"danger\" className=\"mt-4\">\n          {error}\n        </Message>\n      )}\n      <Table\n        striped\n        responsive\n        bordered\n        className=\"border-lt mt-4 table-dark table-hover\"\n        id=\"user-list-table\"\n        style={{ verticalAlign: \"middle\" }}\n      >\n        <thead>\n          <tr>\n            <th>RECIPIENT</th>\n            <th className=\"text-center\">\n              <ClockIcon />\n            </th>\n            <th>READ</th>\n            <th>MORE</th>\n          </tr>\n        </thead>\n        {messages.length > 0 ? (\n          <tbody>\n            {messages.map((message) => (\n              <tr key={message.id}>\n                <td>{message.recipient.email}</td>\n                <td>{message.createdAt.substring(0, 10)}</td>\n                <td>\n                  {message.isRead ? (\n                    <CheckIcon color='green' />\n                  ) : (\n                    <CheckIcon color='red' />\n                  )}\n                </td>\n                <td>\n                  <Dropdown>\n                    <Dropdown.Toggle\n                      variant=\"primary\"\n                      style={{ color: \"var(--bs-secondary)\" }}\n                      id=\"dropdown-basic\"\n                    >\n                      <EllipsesIcon />\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                      <Dropdown.Item onClick={() => readTheMessage(message.id)}>\n                        <Button\n                          variant=\"dark-blue\"\n                          className=\"w-100\"\n                          style={{\n                            color: \"var(--bs-secondary)\",\n                          }}\n                        >\n                          Details\n                        </Button>\n                      </Dropdown.Item>\n                      <Dropdown.Item onClick={() => deleteMessage(message.id)}>\n                        <Button variant=\"danger\" className=\"w-100\">\n                          Delete\n                        </Button>\n                      </Dropdown.Item>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        ) : (\n          <p className=\"p-2 txt--gray\">No Messages were found</p>\n        )}\n      </Table>\n    </Container>\n  );\n};\n\nexport default SentMessageList;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Message from \"../components/Message\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport ClockIcon from \"../icons/ClockIcon\";\nimport EllipsesIcon from \"../icons/EllipsesIcon\";\n\nconst ReceivedMessageList = () => {\n  const user = useSelector((state) => state.user);\n  const { userInfo } = user;\n  const config = useSelector((state) => state.config);\n  const { baseURL } = config;\n  const [messages, setMessages] = useState([]);\n  const navigate = useNavigate();\n  const [error, setError] = useState(\"\");\n  const [now, setNow] = useState(null);\n\n  const changeMessageStatusHandler = async ({ e, id }) => {\n    try {\n      const token = userInfo.token;\n      await axios.put(\n        `/users/received-messages/change-message-status/${id}`,\n        {\n          isRead: e.target.checked,\n        },\n        {\n          headers: {\n            Authorization: `JWT ${token}`,\n            \"Content-Type\": \"application/json\",\n          },\n          baseURL: baseURL,\n        }\n      );\n    } catch (err) {\n      setError(\n        \"There was a problem changing your message's status, Make sure you have a stable internet connection\"\n      );\n    }\n  };\n\n  const deleteMessage = async (id) => {\n    const token = userInfo.token;\n    try {\n      await axios.delete(`${baseURL}/users/messages/delete/${id}`, {\n        headers: {\n          Authorization: `JWT ${token}`,\n        },\n      });\n      setNow(new Date());\n    } catch {\n      setError(\n        \"There was a problem deleting the message, Make sure you have a stable internet connection.\"\n      );\n    }\n  };\n\n  const readTheMessage = (id) => {\n    navigate(`/admin/received-messages-list/${id}`);\n  };\n\n  const fetchMessages = async () => {\n    try {\n      const token = userInfo.token;\n      const { data } = await axios.get(\"/users/received-messages\", {\n        headers: {\n          Authorization: `JWT ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        baseURL: baseURL,\n      });\n      setMessages(data);\n    } catch (err) {\n      setError(\n        \"There was a problem loading the messages, Make sure you have a stable internet connection\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (!userInfo) navigate(\"/login\");\n    if (userInfo && userInfo.isAdmin) fetchMessages();\n  }, [now]);\n\n  return (\n    <Container id=\"user-list__container\">\n      <h2\n        className=\"txt--black font-family-secondary mt-3 mb-0\"\n        style={{ alignSelf: \"flex-start\" }}\n      >\n        Received Messages\n      </h2>\n      {error && (\n        <Message variant=\"danger\" className=\"mt-4\">\n          {error}\n        </Message>\n      )}\n      <Table\n        striped\n        responsive\n        bordered\n        className=\"border-lt mt-4 table-dark table-hover\"\n        id=\"user-list-table\"\n        style={{ verticalAlign: \"middle\" }}\n      >\n        <thead>\n          <tr>\n            <th>SENDER</th>\n            <th className=\"text-center\">\n              <ClockIcon />\n            </th>\n            <th>READ</th>\n            <th className=\"text-center\">MORE</th>\n          </tr>\n        </thead>\n        {messages.length > 0 ? (\n          <tbody>\n            {messages.map((message) => (\n              <tr key={message.id}>\n                <td>{message.sender.email}</td>\n                <td>{message.createdAt.substring(0, 10)}</td>\n                <td>\n                  {/* {\" \"}\n                    {message.isRead ? (\n                      <i className=\"fa fa-check\" style={{ color: \"green\" }}></i>\n                    ) : (\n                      <i className=\"fa fa-check\" style={{ color: \"red\" }}></i>\n                    )} */}\n                  <Form>\n                    <Form.Check\n                      style={{ cursor: \"pointer\" }}\n                      type=\"switch\"\n                      id=\"message-is-read\"\n                      defaultChecked={message.isRead}\n                      onChange={(e) => {\n                        changeMessageStatusHandler({ e, id: message.id });\n                      }}\n                    />\n                  </Form>\n                </td>\n                <td>\n                  <Dropdown>\n                    <Dropdown.Toggle\n                      variant=\"primary\"\n                      style={{ color: \"var(--bs-secondary)\" }}\n                      id=\"dropdown-basic\"\n                    >\n                      <EllipsesIcon />\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                      <Dropdown.Item onClick={() => readTheMessage(message.id)}>\n                        <Button\n                          variant=\"dark-blue\"\n                          className=\"w-100\"\n                          style={{\n                            color: \"var(--bs-secondary)\",\n                          }}\n                        >\n                          Details\n                        </Button>\n                      </Dropdown.Item>\n                      <Dropdown.Item onClick={() => deleteMessage(message.id)}>\n                        <Button variant=\"danger\" className=\"w-100\">\n                          Delete\n                        </Button>\n                      </Dropdown.Item>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        ) : (\n          <p className=\"p-2 txt--gray\">No Messages were found</p>\n        )}\n      </Table>\n    </Container>\n  );\n};\n\nexport default ReceivedMessageList;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport SideNavbar from \"../components/SideNavbar\";\nimport Form from \"react-bootstrap/Form\";\nimport axios from \"axios\";\nimport Message from \"../components/Message\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport classes from \"../pages/Admin/Admin.module.css\";\nimport SentMessageList from \"./SentMessageList\";\nimport ReceivedMessageList from \"./ReceivedMessageList\";\n\nconst MessageManagementPage = () => {\n  const navigate = useNavigate();\n  const user = useSelector((state) => state.user);\n  const { userInfo } = user;\n  const [error, setError] = useState(null);\n  const [userList, setUserList] = useState([]);\n  const [selectedAdmin, setSelectedAdmin] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n  const [refresh, setRefresh] = useState(null);\n\n  const messageInputHandler = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const fetchAdmins = async () => {\n    const token = userInfo.token;\n    try {\n      const { data } = await axios.get(\"api/users/admin-list\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `JWT ${token}`,\n        },\n        baseURL: \"http://localhost:8000\",\n      });\n      setUserList(data);\n    } catch (err) {\n      setError(\n        \"There was a problem loading the admins, Make sure you have a stable internet connection\"\n      );\n    }\n  };\n\n  const formSubmitHandler = async (e) => {\n    e.preventDefault();\n    const token = userInfo.token;\n    if (message.length < 1) setError(\"Message can't be empty\");\n    const response = await axios.post(\n      \"api/users/send-message\",\n      {\n        content: message.trim(),\n        recipient: selectedAdmin,\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `JWT ${token}`,\n        },\n        baseURL: \"http://localhost:8000\",\n      }\n    );\n    if (response.status === 201) {\n      setSuccess(true);\n      setSelectedAdmin(\"\");\n      setMessage(\"\");\n      setRefresh(new Date());\n    }\n  };\n\n  useEffect(() => {\n    if (!userInfo) navigate(\"/login\");\n    if (userInfo && userInfo.isAdmin) fetchAdmins();\n  }, []);\n  return (\n    <div className={classes[\"admin-page\"]}>\n      {/* <h1\n          className=\"txt--black font-family-secondary p-4 mt-3 mb-0\"\n          style={{ alignSelf: \"flex-start\" }}\n        >\n          SUMMARY\n        </h1> */}\n      <div className={classes[\"admin-page-left\"]}>\n        <SideNavbar />\n      </div>\n      <div className={classes[\"admin-page-right\"]}>\n        <div style={{ width: \"70%\", maxWidth: \"680px\" }}>\n          <h1\n            className=\"txt--black font-family-secondary p-4 mt-3 mb-0 px-0\"\n            style={{ alignSelf: \"flex-start\" }}\n          >\n            Send a Message\n          </h1>\n          <Form\n            onSubmit={formSubmitHandler}\n            className=\"p-4 border-lt d-flex gap-4 flex-column\"\n            style={{ backgroundColor: \"#fff\", borderRadius: \"5px\" }}\n          >\n            <Form.Group id=\"admin-list\">\n              {error && <Message variant=\"danger\">{error}</Message>}\n              {success && (\n                <Message variant=\"success\">\n                  Your message was sent successfully\n                </Message>\n              )}\n              <Form.Label\n                className=\"font-family-secondary\"\n                style={{ fontSize: \"1.5rem\" }}\n              >\n                Choose an Admin\n              </Form.Label>\n              {/* <Form.Text style={{ color: \"#e62020\", fontSize: \"12px\", marginLeft: \".5rem\" }}>\n            * Use Control(Command) to select multiple choices or to deselect\n            choices\n          </Form.Text> */}\n              <Form.Control\n                required\n                as=\"select\"\n                value={selectedAdmin}\n                // onChange={(e) => {\n                //   setSelectedAdmins(\n                //     [].slice\n                //       .call(e.target.selectedOptions)\n                //       .map((item) => item.value)\n                //   );\n                // }}\n                onChange={(e) => {\n                  setSelectedAdmin(e.target.value);\n                }}\n              >\n                <option>-----------</option>\n                {userList.map((user) => (\n                  <option value={user.id} key={user.id}>\n                    {user.fullname} | {user.email}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group id=\"send-message\">\n              <Form.Label\n                className=\"font-family-secondary\"\n                style={{ fontSize: \"1.5rem\" }}\n              >\n                Message\n              </Form.Label>\n              <Form.Control\n                placeholder=\"Write your message here...\"\n                required\n                as=\"textarea\"\n                maxLength={450}\n                value={message}\n                onChange={messageInputHandler}\n              />\n            </Form.Group>\n            <Form.Group>\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n                style={{ color: \"var(--bs-secondary)\" }}\n                className=\"w-100\"\n              >\n                Send\n              </Button>\n            </Form.Group>\n          </Form>\n        </div>\n        <div\n          className=\"d-flex\"\n          style={{ width: \"80%\" }}\n          id=\"messages-table__container\"\n        >\n          <SentMessageList refresh={refresh} />\n          <ReceivedMessageList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MessageManagementPage;\n"],"names":["color","xmlns","height","viewBox","style","fill","fontSize","d","refresh","userInfo","useSelector","state","user","baseURL","config","useState","messages","setMessages","navigate","useNavigate","error","setError","now","setNow","deleteMessage","id","token","axios","headers","Authorization","Date","fetchMessages","data","useEffect","isAdmin","Container","className","alignSelf","Message","variant","Table","striped","responsive","bordered","verticalAlign","length","map","message","recipient","email","createdAt","substring","isRead","CheckIcon","Dropdown","EllipsesIcon","onClick","Button","changeMessageStatusHandler","e","target","checked","sender","Form","cursor","type","defaultChecked","onChange","userList","setUserList","selectedAdmin","setSelectedAdmin","setMessage","success","setSuccess","setRefresh","fetchAdmins","formSubmitHandler","preventDefault","content","trim","status","classes","SideNavbar","width","maxWidth","onSubmit","backgroundColor","borderRadius","required","as","value","fullname","placeholder","maxLength"],"sourceRoot":""}