{"version":3,"file":"static/js/650.7e305afe.chunk.js","mappings":"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","sources":["components/FormContainer.js","components/Message.js","pages/EnterCardInformationPage.js"],"sourcesContent":["import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst FormContainer = ({ children, className }) => {\n  return (\n    <Container>\n        <Row className={`justify-content-md-center ${className}`}>\n            <Col xs={12} md={6}>\n                {children}\n            </Col>\n        </Row>\n    </Container>\n  )\n}\n\nexport default FormContainer","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst Message = ({ variant, children, className }) => {\n  return <Alert variant={variant} className={`${className}`}>{children}</Alert>;\n};\n\nexport default Message;\n","import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams, Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Loader from \"../components/Loader\";\nimport Message from \"../components/Message\";\nimport FormContainer from \"../components/FormContainer\";\nimport { getOrderDetail, updateOrderToPaid } from \"../store/slices/orderSlice\";\nimport validator from \"validator\";\n\nconst EnterCardInformationPage = () => {\n  const [cardNumber, setCardNumber] = useState(\"\");\n  const date = new Date();\n  const currentYear = date.getFullYear();\n  const [cvc, setCVC] = useState(\"\");\n  const [month, setMonth] = useState(\"\");\n  const [year, setYear] = useState(\"\");\n  const { orderId } = useParams();\n  const [CardError, setCardError] = useState(null);\n\n  const user = useSelector((state) => state.user);\n  const { userInfo } = user;\n\n  const navigate = useNavigate();\n  const orders = useSelector((state) => state.orders);\n  const { orderDetail, loading, success, error } = orders;\n  const dispatch = useDispatch();\n  const [formError, setFormError] = useState(null);\n\n  const cardNumberChangeHandler = (value) => {\n    setCardNumber(value);\n    if (validator.isCreditCard(value)) {\n      setCardError(false);\n      setFormError(\"\");\n    } else {\n      setCardError(true);\n      setFormError(\"Please Enter a Valid Credit Card Number\");\n    }\n  };\n\n  const formSubmitHandler = (e) => {\n    e.preventDefault();\n    if (\n      cardNumber &&\n      !CardError &&\n      cvc &&\n      month.length > 0 &&\n      year.length > 0 &&\n      userInfo\n    ) {\n      const token = userInfo.token;\n      const totalPrice = orderDetail.totalPrice;\n      dispatch(updateOrderToPaid({ orderId, token, totalPrice }));\n      navigate(`/orders/${orderId}`);\n    }\n  };\n\n  useEffect(() => {\n    if (!userInfo) navigate(\"/login\");\n    if (success) window.location.reload(); // Fix success message staying on the screen from the last payment\n    if (!orderDetail || orderDetail.id !== Number(orderId)) {\n      const token = userInfo.token;\n      dispatch(getOrderDetail({ orderId, token }));\n    }\n  }, [dispatch, orderDetail, orderId, navigate, orderDetail.isPaid, success]);\n\n  return (\n    <FormContainer>\n      {loading && <Loader />}\n      {!userInfo && <Message variant=\"info\">Please Log in First</Message>}\n      {orderDetail && userInfo && (\n        <Form\n          onSubmit={formSubmitHandler}\n          id=\"register-form\"\n          className=\"p-4 border-lt mt-4\"\n        >\n          <h1\n            className=\"font-family-secondary txt--black text-center\"\n            style={{ fontSize: \"3rem\" }}\n          >\n            Payment\n          </h1>\n          {success && <Link to={`/users/${userInfo.id}/edit`}>Profile</Link>}\n          {error && <Message variant=\"danger\">{error}</Message>}\n          <Form.Group controlId=\"totalPrice\">\n            <Form.Label\n              className=\"font-family-secondary\"\n              style={{ fontSize: \"1.5rem\" }}\n            >\n              Total Price\n            </Form.Label>\n            <Form.Control\n              readOnly\n              type=\"text\"\n              value={orderDetail.totalPrice}\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"cardNumber\">\n            <Form.Label\n              className=\"font-family-secondary\"\n              style={{ fontSize: \"1.5rem\" }}\n            >\n              Card Number\n            </Form.Label>\n            <Form.Control\n              required\n              autoComplete=\"true\"\n              type=\"text\"\n              placeholder=\"Enter Card Number\"\n              value={cardNumber}\n              onChange={(e) => {\n                cardNumberChangeHandler(e.target.value.trim());\n              }}\n            ></Form.Control>\n            {formError && (\n              <Message variant=\"danger\" className=\"mt-3\">\n                {formError}\n              </Message>\n            )}\n          </Form.Group>\n          <Form.Group controlId=\"cvc\">\n            <Form.Label\n              className=\"font-family-secondary\"\n              style={{ fontSize: \"1.5rem\" }}\n            >\n              CVC\n            </Form.Label>\n            <Form.Control\n              required\n              autoComplete=\"true\"\n              type=\"text\"\n              placeholder=\"CVC\"\n              value={cvc}\n              onChange={(e) => setCVC(e.target.value)}\n            ></Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"month\">\n            <Form.Select\n              className=\"mb-2\"\n              aria-label=\"Exp.Month\"\n              value={month}\n              onChange={(e) => {\n                setMonth(e.target.value);\n              }}\n            >\n              <option>Month</option>\n              <option value={1}>January</option>\n              <option value={2}>Fabruary</option>\n              <option value={3}>March</option>\n              <option value={4}>April</option>\n              <option value={5}>May</option>\n              <option value={6}>June</option>\n              <option value={7}>July</option>\n              <option value={8}>August</option>\n              <option value={9}>September</option>\n              <option value={10}>October</option>\n              <option value={11}>November</option>\n              <option value={12}>December</option>\n            </Form.Select>\n          </Form.Group>\n          <Form.Group controlId=\"year\">\n            <Form.Select\n              className=\"mb-2\"\n              aria-label=\"Exp.Year\"\n              value={year}\n              onChange={(e) => {\n                setYear(e.target.value);\n              }}\n            >\n              <option>Year</option>\n              <option value={currentYear}>{currentYear}</option>\n              <option value={currentYear + 1}>{currentYear + 1}</option>\n              <option value={currentYear + 2}>{currentYear + 2}</option>\n              <option value={currentYear + 3}>{currentYear + 3}</option>\n              <option value={currentYear + 4}>{currentYear + 4}</option>\n              <option value={currentYear + 5}>{currentYear + 5}</option>\n              <option value={currentYear + 6}>{currentYear + 6}</option>\n              <option value={currentYear + 7}>{currentYear + 7}</option>\n            </Form.Select>\n          </Form.Group>\n          <Button\n            type=\"submit\"\n            className=\"w-100\"\n            style={{ color: \"var(--bs-secondary)\" }}\n            variant={loading ? \"info\" : \"primary\"}\n          >\n            {loading ? \"Loading...\" : \"Pay\"}\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"primary\"\n            style={{ color: \"var(--bs-black)\", backgroundColor: \"transparent\" }}\n            onClick={() => {\n              navigate(-1);\n            }}\n            className=\"w-100 mt-2\"\n          >\n            Cancel\n          </Button>\n          {success && (\n            <Message variant=\"success\">Payment Was Successful</Message>\n          )}\n        </Form>\n      )}\n    </FormContainer>\n  );\n};\n\nexport default EnterCardInformationPage;\n"],"names":["children","className","xs","md","variant","useState","cardNumber","setCardNumber","currentYear","Date","getFullYear","cvc","setCVC","month","setMonth","year","setYear","orderId","useParams","CardError","setCardError","userInfo","useSelector","state","user","navigate","useNavigate","orders","orderDetail","loading","success","error","dispatch","useDispatch","formError","setFormError","useEffect","window","location","reload","id","Number","token","getOrderDetail","isPaid","onSubmit","e","preventDefault","length","totalPrice","updateOrderToPaid","style","fontSize","Link","to","controlId","readOnly","type","value","required","autoComplete","placeholder","onChange","target","trim","validator","color","backgroundColor","onClick"],"sourceRoot":""}